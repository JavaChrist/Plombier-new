export const dynamic = 'force-dynamic'; // Emp√™che la mise en cache des requ√™tes API
export const runtime = 'nodejs'; // ‚ö†Ô∏è Assure l'ex√©cution en Node.js (obligatoire pour Puppeteer)

import { NextResponse } from 'next/server';
import { generateFacturePDF } from '@/utils/generatePDF';

export async function POST(request: Request) {
  try {
    console.log("üîç [API] Requ√™te re√ßue pour g√©n√©rer un PDF...");

    // Lire les donn√©es envoy√©es
    const { facture, entreprise } = await request.json();

    // V√©rifier que les donn√©es sont bien re√ßues
    if (!facture || !facture.numeroFacture) {
      throw new Error("‚ùå Donn√©es de facture invalides ou num√©ro manquant !");
    }

    console.log("üìÑ [API] G√©n√©ration du PDF pour la facture :", facture.numeroFacture);

    // G√©n√©rer le PDF avec Puppeteer
    const pdfBuffer = await generateFacturePDF(facture, entreprise);
    
    console.log("‚úÖ [API] PDF g√©n√©r√© avec succ√®s !");

    // Retourner le PDF sous forme de r√©ponse
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `inline; filename="Facture_${facture.numeroFacture}.pdf"`,
      },
    });

  } catch (error) {
    console.error("‚ùå [API] Erreur d√©taill√©e :", error);

    return NextResponse.json(
      {
        error: "Erreur lors de la g√©n√©ration du PDF",
        details: error instanceof Error ? error.message : "Erreur inconnue",
      },
      { status: 500 }
    );
  }
}

// üö® Gestion des autres m√©thodes HTTP (√©vite les erreurs 405)
export function GET() {
  return NextResponse.json({ error: "M√©thode GET non autoris√©e" }, { status: 405 });
}

export function PUT() {
  return NextResponse.json({ error: "M√©thode PUT non autoris√©e" }, { status: 405 });
}

export function DELETE() {
  return NextResponse.json({ error: "M√©thode DELETE non autoris√©e" }, { status: 405 });
}
